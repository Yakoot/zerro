import { getAccTagMap } from '@entities/old-hiddenData/accTagMap'
import { getGoals } from '@entities/old-hiddenData/goals'
import { getTagMeta } from '@entities/old-hiddenData/tagMeta'
import { userSettingsModel } from '@entities/userSettings'
import { Card, IconButton, Link, Stack, Typography } from '@mui/material'
import { keys } from '@shared/helpers/keys'
import { CloseIcon } from '@shared/ui/Icons'
import { Tooltip } from '@shared/ui/Tooltip'
import { useAppDispatch, useAppSelector } from '@store/index'
import Balancer from 'react-wrap-balancer'

export const Explainer = () => {
  const { markSeen, isVisible } = useExplainerModel()
  if (!isVisible) return null

  return (
    <Card sx={{ p: 2 }}>
      <Stack
        spacing={2}
        direction="row"
        justifyContent="flex-start"
        alignItems="flex-start"
      >
        <Typography variant="h5">üéâ</Typography>
        <Stack spacing={1} flexGrow={1}>
          <Typography variant="body1">
            <Balancer>
              <b>Zerro –æ–±–Ω–æ–≤–∏–ª—Å—è –∏ —Å—Ç–∞–ª —É–º–Ω–µ–µ</b>
              <br />
              –†–∞–¥–∏ —ç—Ç–æ–≥–æ –ø—Ä–∏—à–ª–æ—Å—å —Å–ª–æ–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ—ç—Ç–æ–º—É
              –º–æ–≥—É—Ç –ø–æ–ø–ª—ã—Ç—å –±—é–¥–∂–µ—Ç—ã, –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ –ø—Ä–∏–¥—ë—Ç—Å—è –≤—Ä—É—á–Ω—É—é.
            </Balancer>
          </Typography>
          <Stack direction="row" flexWrap="wrap" rowGap={1} columnGap={2}>
            <Link href="https://t.me/zerroapp" color="secondary">
              –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?
            </Link>
            <Link href="https://old.zerro.app" color="secondary">
              –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
            </Link>
          </Stack>
        </Stack>

        <Tooltip title="–°–∫—Ä—ã—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ">
          <IconButton onClick={markSeen}>
            <CloseIcon />
          </IconButton>
        </Tooltip>
      </Stack>
    </Card>
  )
}

function useExplainerModel() {
  const dispatch = useAppDispatch()
  const oldLinks = useAppSelector(s => keys(getAccTagMap(s)).length)
  const oldGoals = useAppSelector(s => keys(getGoals(s)).length)
  const oldTagMeta = useAppSelector(s => keys(getTagMeta(s)).length)
  const sawMigrationAlert = useAppSelector(
    s => !!userSettingsModel.getUserSettings(s).sawMigrationAlert
  )
  const markSeen = () => {
    dispatch(userSettingsModel.patchUserSettings({ sawMigrationAlert: true }))
  }
  const hasOldData = Boolean(oldLinks || oldGoals || oldTagMeta)

  return { markSeen, isVisible: hasOldData && !sawMigrationAlert }
}
